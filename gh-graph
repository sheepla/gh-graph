#!/bin/bash

set -o errexit
set -o nounset

readonly THIS_CMD="${0##*/}"
readonly BASE_URL="https://github-contributions-api.deno.dev"

function _version() {
    readonly VERSION="0.0.1"
    readonly AUTHOR="sheepla"
    readonly LICENSE="MIT"
    readonly GITHUB_URL="https://github.com"
    readonly REPO_NAME="${THIS_CMD}-cli"
    echo -e "${THIS_CMD} -- v${VERSION}
    Repo:   ${GITHUB_URL}/${AUTHOR}/${REPO_NAME}
    Author: ${AUTHOR} (${GITHUB_URL}/${AUTHOR})
    "
}

function _help() {
    readonly API_REPO_URL="https://github.com/kawarimidoll/deno-github-contributions-api"

    echo -e "\
${THIS_CMD} -- a github-contribution-api wrapper command

USAGE
    ${THIS_CMD} MODE USERNAME [PARAMS...]
    ${THIS_CMD} --help|--version

    * MODE: output mode
        t, term   print data as a colored pixels graph
        j, json   print data as a JSON
        x, text   print data as a table-styled text
        s, svg    print data as a SVG image
    * USERNAME: username on GitHub
    * PARAMS: 
        parameters for the API 
        syntax is
            name1=value1 name2=value2 ...
        to know parameters, run
            curl ${BASE_URL}/{{USERNAME}}

EXAMPLES
    ${THIS_CMD} term sheepla scheme=pink
    ${THIS_CMD} json sheepla flat=true

THANKS
    This tool utilises this API. Thanks!
    ${API_REPO_URL}
"
}

function _main() {

    if [[ "${#}" -lt 2 ]]; then
        _err "Too few arguments..."
        _help
        return 0
    fi

    for arg in "${@}"; do
        case "${arg}" in
        --help)
            _help
            return 0
            ;;
        --version)
            _version
            return 0
            ;;
        esac
    done

    _test_cmd curl || return 1

    for arg in "${@}"; do
        case "${arg}" in
        t | term)
            shift 1
            _fetch "term" "${@}"
            return 0
            ;;
        j | json)
            shift 1
            _fetch "json" "${@}"
            return 0
            ;;
        x | text)
            mode="text"
            shift 1
            _fetch "text" "${@}"
            return 0
            ;;
        s | svg)
            shift 1
            _fetch "svg" "${@}"
            return 0
            ;;
        *)
            _err "Invalid mode: ${arg}"
            return 1
            ;;
        esac
    done

}

function _err() {
    echo -e "[ \e[31mERR\e[m ] ${*}"
}

function _test_cmd() {
    for cmd in "${@}"; do
        if ! command -v "${cmd}" &>/dev/null; then
            _err "${cmd} is not installed. please install it."
            return 1
        fi
    done

    return 0
}

function _fetch() {
    local mode="${1}"
    local username="${2}"
    shift 2

    # join args with "&"
    local params="$(
        IFS="&"
        printf "${*}"
    )"

    if [ -z "${params}" ]; then
        curl -s "${BASE_URL}/${username}.${mode}"
    else
        curl -s "${BASE_URL}/${username}.${mode}?${params}"
    fi
}

_main "${@}"
exit "${?}"
